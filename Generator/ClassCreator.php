<?php

namespace W3com\BoomBundle\Generator;

use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PhpNamespace;
use Symfony\Component\Form\Exception\TransformationFailedException;
use W3com\BoomBundle\Annotation\EntityColumnMeta;
use W3com\BoomBundle\Annotation\EntityMeta;
use W3com\BoomBundle\HanaEntity\AbstractEntity;
use W3com\BoomBundle\Service\BoomManager;
use W3com\BoomBundle\Generator\Model\Entity;
use W3com\BoomBundle\Generator\Model\Property;

class ClassCreator
{

    private $manager;

    public function __construct(BoomManager $manager)
    {
        $this->manager = $manager;
    }

    public function generateClass(Entity $entity)
    {
        $file = $this->getBaseFile();
        $namespace = $this->getNamespace($file);

        $class = $namespace->addClass($entity->getName());
        $class
            ->addExtend(AbstractEntity::class)
            ->addComment(
                str_replace('ZZ_ALIAS', $entity->getTable(),
                    str_replace('ZZ_TYPE', 'ods', Entity::ANNOTATION)
                    ));

        /** @var Property $property */
        foreach ($entity->getProperties() as $property){

            if ($property->getIsKey()){
                $class
                    ->addProperty($property->getName())
                    ->setVisibility(Property::PROPERTY_VISIBILITY)
                    ->addComment(str_replace('ZZ', $property->getField(),
                        Property::PROPERTY_ANNOTATION_ISKEY));
            } else {
                $class
                    ->addProperty($property->getName())
                    ->setVisibility(Property::PROPERTY_VISIBILITY)
                    ->addComment(str_replace('ZZ', $property->getField(),
                        Property::PROPERTY_ANNOTATION));
            }
            $this->addGetter($property, $class);

        }
        return $file;
    }

    private function addGetter(Property $property, ClassType $class)
    {
        $class->addMethod('get'.ucfirst($property->getName()))
            ->addBody('return $this->'.$property->getName().';');
    }

    private function getBaseFile(): PhpFile
    {
        $file = new PhpFile();
        $file->addComment('This file is auto-generated by Boom.');
        $entityNamespace = $this->manager->config['app_namespace'].'\\HanaEntity';
        $namespace = $file->addNamespace($entityNamespace);
        $namespace
            ->addUse(EntityColumnMeta::class)
            ->addUse(EntityMeta::class);
        return $file;
    }

    private function getNamespace(PhpFile $file): PhpNamespace
    {
        $namespace = $file->getNamespaces();
        if (count($namespace) === 1){
            return array_shift($namespace);
        }
        throw new TransformationFailedException('Unable to find namespace for file');
    }
}